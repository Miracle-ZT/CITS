<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="sfw.xmut.dao.MovieDao">
    <select id="findMovieById" parameterType="int" resultMap="MovieWithTypeResult">
        SELECT
            m.*
        FROM
            movie m
        WHERE
            m.movie_id = #{id}
    </select>

    <!-- 存在场次的 符合时间段的 电影列表 -->
    <select id="findMovieWithList" parameterType="Map" resultMap="MovieWithTypeResult">
        select * from screening,cinema,movie where 1 = 1
        <if test="startTime != null and endTime != null">
            and start_time &gt;= #{startTime}
            and start_time &lt; #{endTime}
        </if>
        <if test="cinemaId != null">
            and screening.cinema_id = #{cinemaId}
        </if>
            and screening.movie_id = movie.movie_id
            and screening.cinema_id = cinema.cinema_id
            GROUP BY movie.movie_id
    </select>

    <!-- 只查询全部电影列表本身 -->
    <select id="findMovieList" parameterType="Map" resultMap="MovieWithTypeResult">
        select * from movie where 1 = 1
        <if test="movieStatus != null">
            and movie_status = #{movieStatus}
        </if>
        <if test="keyWord != null">
            and
                (   chinese_name like #{keyWord}
                    or english_name like #{keyWord}
                    or director like #{keyWord}
                    or actors like #{keyWord}
                )
        </if>
        <if test="NotInBan != null">
            and movie_id not in (
                select movie_id
                from banner
            )
        </if>
        <if test="typeId != null">
            AND movie_id IN (
            SELECT
            movie_id
            FROM
            type_item ti
            WHERE
            ti.type_id = #{typeId}
            )
        </if>
        <if test="beginYear != null and endYear != null">
            AND release_date &gt;= #{beginYear}
            AND release_date &lt;= #{endYear}
        </if>
        order by movie.movie_id
<!--        <if test="begin != null and pageSize != null">-->
<!--            limit #{begin},#{pageSize}-->
<!--        </if>-->
    </select>

    <!-- 查询电影的票房排名列表及其对应的票房值 -->
    <select id="findMovieListWithBO" parameterType="Map" resultType="Map">
        select m.movie_id,m.actors,m.chinese_name as movie_name,sum(o.total_price) as bo,m.img_url
        from movie m,orders o,screening s
        where o.screening_id = s.screening_id
        and s.movie_id = m.movie_id

--         今日范围内
        <if test="today != null">
            and s.start_time &gt; DATE(NOW())
            and s.start_time &lt; DATE_ADD(CURDATE(), INTERVAL 1 DAY)
        </if>
        group by m.movie_id
        order by bo DESC
    </select>

    <!-- 查询指定电影对应的票房值 -->
    <select id="findBOWithMovieId" parameterType="int" resultType="Long">
        SELECT
            sum( o.total_price )
        FROM
            movie m,
            orders o,
            screening s
        WHERE
            o.screening_id = s.screening_id
          AND s.movie_id = m.movie_id
          AND s.movie_id = #{movieId}
        GROUP BY
            m.movie_id
    </select>

    <!-- 查询指定电影的平均评分 -->
    <!-- 若无结果则默认为0 -->
    <select id="findAvgScoreWithMovieId" parameterType="int" resultType="Double">
        SELECT
            IFNULL(AVG( co.comment_score ),0) AS avg_score
        FROM
            comment co
        WHERE
            co.is_order_comment = 1
          AND co.movie_id = #{movieId}
    </select>

    <!-- 电影添加操作 -->
    <insert id="add" useGeneratedKeys="true" keyProperty="movieId"  parameterType="Movie">
        insert into movie(movie_id,chinese_name,english_name,img_url,time_len,release_date,introduction,country,director,actors,movie_status,add_date) values(null,#{chineseName},#{englishName},#{imgUrl},#{timeLen},#{releaseDate},#{introduction},#{country},#{director},#{actors},#{movieStatus},#{addDate})
    </insert>

    <!-- 电影更新操作 -->
    <update id="edit" parameterType="Movie">
        update movie
        set chinese_name = #{chineseName},
            english_name = #{englishName},
            img_url      = #{imgUrl},
            time_len     = #{timeLen},
            release_date = #{releaseDate},
            introduction = #{introduction},
            country      = #{country},
            director     = #{director},
            actors       = #{actors},
            movie_status = #{movieStatus}
        where movie_id = #{movieId}
    </update>

    <select id="findMovieByIdDemo" parameterType="int" resultMap="MovieWithTypeResult">
        SELECT
            m.*,t.*
        FROM
            movie m,
            type t,
            type_item ti
        WHERE
            m.movie_id = #{id}
          AND m.movie_id = ti.movie_id
          AND t.type_id = ti.type_id
    </select>

    <resultMap id="MovieWithTypeResult" type="Movie">
        <id property="movieId" column="movie_id"/>
        <result property="chineseName" column="chinese_name"/>
        <result property="englishName" column="english_name"/>
        <result property="imgUrl" column="img_url"/>
        <result property="timeLen" column="time_len"/>
        <result property="releaseDate" column="release_date"/>
        <result property="introduction" column="introduction"/>
        <result property="country" column="country"/>
        <result property="director" column="director"/>
        <result property="actors" column="actors"/>
        <result property="movieStatus" column="movie_status"/>
        <result property="addDate" column="add_date"/>
        <collection property="typeList" ofType="Type"
                    select="sfw.xmut.dao.MovieDao.findTypeList"
                    column="movie_id">
            <!-- 将原有形式修改为子查询 -->
<!--            <id property="typeId" column="type_id"/>-->
<!--            <result property="typeName" column="type_name"/>-->
        </collection>
    </resultMap>

    <select id="findTypeList" resultMap="TypeMap">
        SELECT
            t.type_id,t.type_name
        FROM
            type t,
            type_item ti
        WHERE
            1 = 1
          AND t.type_id = ti.type_id
          AND ti.movie_id = #{movieId}
    </select>
    <resultMap id="TypeMap" type="Type">
        <id property="typeId" column="type_id"/>
        <result property="typeName" column="type_name"/>
    </resultMap>
</mapper>